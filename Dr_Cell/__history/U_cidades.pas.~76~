unit U_cidades;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.Buttons, Vcl.ExtCtrls,
  Data.DB, Vcl.Grids, Vcl.DBGrids, FireDAC.Stan.Intf, FireDAC.Stan.Option,
  FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf,
  FireDAC.DApt.Intf, FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client;

type
  TF_Cidades = class(TForm)
    Panel1: TPanel;
    b_fechar: TBitBtn;
    Label1: TLabel;
    edit_pesquisa: TEdit;
    b_excluir: TBitBtn;
    b_alterar: TBitBtn;
    b_incluir: TBitBtn;
    Bevel1: TBevel;
    DBGrid1: TDBGrid;
    Q_Cidades: TFDQuery;
    DS_Cidades: TDataSource;
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure edit_pesquisaChange(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure b_fecharClick(Sender: TObject);
    procedure b_excluirClick(Sender: TObject);
    procedure b_incluirClick(Sender: TObject);
    procedure b_alterarClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }

    procedure carregar_query(s : string);

  end;

var
  F_Cidades: TF_Cidades;

implementation

{$R *.dfm}

uses  u_cidades_ficha, u_dm;

// OnClose do botão fechar
procedure TF_Cidades.b_fecharClick(Sender: TObject);
begin
     close;
end;

procedure TF_Cidades.b_incluirClick(Sender: TObject);
// OnClick do botão Incluir
begin
     // se o formulário não estiver instanciado
     if not Assigned(F_cidades_ficha) then
     begin
          // instanciando o formulário
          F_cidades_ficha:= TF_cidades_ficha.create(application);
          F_cidades_ficha.cod_cidade:= '';
     end
     else begin
          F_cidades_ficha.Show;
     end;

end;

procedure TF_Cidades.b_alterarClick(Sender: TObject);
// OnClick do botão alterar
begin
     // se a query cidades não conter dados
     if q_cidades.IsEmpty then
     begin
          ShowMessage('Não há um registro selecionado para alterar !');
          exit;
     end;

     // se o formulário não estiver instanciado
     if not Assigned(F_cidades_ficha) then
     begin
          // instanciando o formulário
          F_cidades_ficha:= TF_cidades_ficha.create(application);
          F_cidades_ficha.cod_cidade:= q_cidades.FieldByName('cod_cidade').AsString;
          F_cidades_ficha.carregar_dados;
     end
     else begin
          F_cidades_ficha.Show;
     end;

end;

procedure TF_Cidades.b_excluirClick(Sender: TObject);
// OnClick do botão excluir
begin
     // se a query cidades não conter dados
     if q_cidades.IsEmpty then
     begin
          ShowMessage('Não há um registro selecionado para exclusão !');
          exit;
     end;

     if MessageDlg('Deseja realmente excluir a cidade ' + q_cidades.FieldByName('nome').AsString + ' ??',
                    mtConfirmation,[mbYes,mbNo],0) = mrYes then
     begin
          dm.q_geral.sql.clear;
          dm.q_geral.sql.add(' sp_del_cidade :cod_cidade ');
          dm.q_geral.parambyname(q_cidades.FieldByName('cod_cidade').AsString);
          dm.q_geral.Open;

          if dm.q_geral.fieldbyname('retorno').AsInteger = 1 then
          begin
               // Atualizando a query q_cidades
               carregar_query('');
          end
          else begin
               MessageDlg( dm.q_geral.fieldbyname('retorno').AsString, mtError,[mbOk],0 );
          end;

     end;




{
     // verificar se há clientes e fornecedores relacionados
     dm.q_geral.sql.Clear;
     dm.q_geral.sql.add(' select count(*) as total ' );
     dm.q_geral.sql.add(' from CLIENTES ');
     dm.q_geral.sql.add(' where cod_cidade = ' + QuotedStr(q_cidades.FieldByName('cod_cidade').AsString) );
     dm.q_geral.Open;
     if dm.Q_Geral.FieldByName('total').AsInteger > 0 then
     begin
          ShowMessage('Não é possível excluir essa cidade porque há clientes relacionados !');
          exit;
     end;

     dm.q_geral.sql.Clear;
     dm.q_geral.sql.add(' select count(*) as total ' );
     dm.q_geral.sql.add(' from FORNECEDORES ');
     dm.q_geral.sql.add(' where cod_cidade = ' + QuotedStr(q_cidades.FieldByName('cod_cidade').AsString) );
     dm.q_geral.Open;
     if dm.Q_Geral.FieldByName('total').AsInteger > 0 then
     begin
          ShowMessage('Não é possível excluir essa cidade porque há fornecedores relacionados !');
          exit;
     end;

     if MessageDlg('Deseja realmente excluir a cidade ' + q_cidades.FieldByName('nome').AsString + ' ??',
                    mtConfirmation,[mbYes,mbNo],0) = mrYes then
     begin
          dm.q_geral.sql.clear;
          dm.q_geral.sql.add(' delete from cidades ');
          dm.q_geral.sql.add(' where cod_cidade = ' + QuotedStr(q_cidades.FieldByName('cod_cidade').AsString) );
          dm.q_geral.ExecSql;
          // observação:
          // o Método ExecSql é utilizado para os comandos SQL: Insert, Update e Delete
          // o Método Open é utilizado para o comando SELECT

          // Atualizando a query q_cidades
          carregar_query('');
     end;

}

end; // fim do onclick do botão excluir

procedure TF_Cidades.carregar_query(s : string);
begin
     q_cidades.SQL.Clear;
     q_cidades.SQL.add(' select * ');
     q_cidades.SQL.add(' from cidades ');
     q_cidades.SQL.add(' where nome like ' + QuotedStr('%'+s+'%') + ' ');
     q_cidades.SQL.add(' order by nome ');
     q_cidades.Open;
     //q_cidades.Active:= true;
     { Observações:
       - A função QuotedStr, coloca entre aspas simples o conteúdo de seu parâmetro
     }
end; // carregar_query

// OnChange do edit_pesuisa
procedure TF_Cidades.edit_pesquisaChange(Sender: TObject);
begin
     carregar_query(edit_pesquisa.text);
end;
// OnCreate do formulário f_cidades
procedure TF_Cidades.FormCreate(Sender: TObject);
begin
     carregar_query('');
end;

// OnClose de F_Cidades
procedure TF_Cidades.FormClose(Sender: TObject; var Action: TCloseAction);
begin
     Action:= caFree;
     f_cidades:= nil;
end;



end.
